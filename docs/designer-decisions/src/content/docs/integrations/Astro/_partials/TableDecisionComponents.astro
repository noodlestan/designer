---
import { Table, TableRow } from '@noodlestan/designer-shows/astro';

type Props = {
    domain?: string;
};

const { domain } = Astro.props;

const types = [
    {
        name: 'SizeValue',
        type: 'size-value',
        domain: 'space',
        viz: 'ShowSizeViz',
        value: 'ShowSizeValue',
    },
    {
        name: 'SizeScale',
        type: 'size-scale',
        domain: 'space',
        viz: 'ShowSizeViz',
        value: 'ShowSizeValue',
    },
    {
        name: 'ColorValue',
        type: 'color-value',
        domain: 'color',
        viz: 'ShowColorViz',
        value: 'ShowColorValue',
    },
    {
        name: 'ColorSet',
        type: 'color-set',
        domain: 'color',
        viz: 'ShowColorViz',
        value: 'ShowColorValue',
    },
    {
        name: 'Color Oklab Hue Value',
        type: 'oklab-hue-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Hue Set',
        type: 'oklab-hue-set',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Chroma Value',
        type: 'oklab-chroma-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Chroma Scale',
        type: 'oklab-chroma-scale',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Lightness Value',
        type: 'oklab-lightness-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Lightness Scale',
        type: 'oklab-lightness-scale',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Hue Value',
        type: 'srgb-hue-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Hue Set',
        type: 'srgb-hue-set',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Saturation Value',
        type: 'srgb-saturation-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Saturation Scale',
        type: 'srgb-saturation-scale',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Lightness Value',
        type: 'srgb-lightness-value',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Lightness Scale',
        type: 'srgb-lightness-scale',
        domain: 'color',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Typeface Value ',
        type: 'typeface-value',
        domain: 'typography',
        viz: 'ShowTypeViz',
        value: 'ShowTypeValue',
    },
];

const items = domain ? types.filter(({ domain: d }) => d === domain) : types;
---

<Table columns={['Decision Type', 'Value Component', 'Viz Component']}>
    {
        items.map(({ name, type, value, viz }) => (
            <TableRow>
                <td>
                    <a href={`/models/decision-types/${type}`}>{name}</a>
                </td>
                <td>
                    <a href={`/integrations/Astro/Composable/Values#${value.toLowerCase()}`}>
                        {value}
                    </a>
                </td>
                <td>
                    <a href={`/integrations/Astro/Composable/Visualizations#${viz.toLowerCase()}`}>
                        {viz}
                    </a>
                </td>
            </TableRow>
        ))
    }
</Table>
