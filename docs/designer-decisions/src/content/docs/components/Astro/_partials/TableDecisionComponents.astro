---
import { Table, TableRow } from '@noodlestan/designer-shows/astro';

type Props = {
    domain?: string;
};

const { domain } = Astro.props;

const types = [
    {
        name: 'SpaceValue',
        type: 'space-value',
        viz: 'ShowSpaceViz',
        value: 'ShowSpaceValue',
    },
    {
        name: 'SpaceScale',
        type: 'space-scale',
        viz: 'ShowSpaceViz',
        value: 'ShowSpaceValue',
    },
    {
        name: 'ColorValue',
        type: 'color-value',
        viz: 'ShowColorViz',
        value: 'ShowColorValue',
    },
    {
        name: 'ColorSet',
        type: 'color-set',
        viz: 'ShowColorViz',
        value: 'ShowColorValue',
    },
    {
        name: 'Color Oklab Hue Value',
        type: 'color-oklab-hue-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Hue Set',
        type: 'color-oklab-hue-set',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Chroma Value',
        type: 'color-oklab-chroma-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Chroma Scale',
        type: 'color-oklab-chroma-scale',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Lightness Value',
        type: 'color-oklab-lightness-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color Oklab Lightness Scale',
        type: 'color-oklab-lightness-scale',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Hue Value',
        type: 'color-srgb-hue-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Hue Set',
        type: 'color-srgb-hue-set',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Saturation Value',
        type: 'color-srgb-saturation-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Saturation Scale',
        type: 'color-srgb-saturation-scale',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Lightness Value',
        type: 'color-srgb-lightness-value',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
    {
        name: 'Color sRGB Lightness Scale ',
        type: 'color-srgb-lightness-scale ',
        viz: 'ShowColorChannelViz',
        value: 'ShowColorChannelValue',
    },
];

const items = domain ? types.filter(({ type }) => type.startsWith(domain)) : types;
---

<Table columns={['Decision Type', 'Value Component', 'Viz Component']}>
    {
        items.map(({ name, type, value, viz }) => (
            <TableRow>
                <td>
                    <a href={`/decision-models/${type}`}>{name}</a>
                </td>
                <td>
                    <a href={`/components/Astro/Composable/Values#${value.toLowerCase()}`}>
                        {value}
                    </a>
                </td>
                <td>
                    <a href={`/components/Astro/Composable/Viz#${viz.toLowerCase()}`}>{viz}</a>
                </td>
            </TableRow>
        ))
    }
</Table>
