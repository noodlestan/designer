---
type Props = {
    columns?: number;
    align?: 'start' | 'center';
    gap?: 's' | 'm' | 'l';
    hGap?: 's' | 'm' | 'l';
    vGap?: 's' | 'm' | 'l';
    tag?: 'div' | 'ul' | 'li';
};

const {
    align = 'start',
    columns = 2,
    gap: maybeGap,
    hGap: maybeHGap,
    vGap: maybeVGap,
    tag: Element = 'div',
} = Astro.props;

const gap = maybeGap || 'm';
const hGap = maybeHGap ?? gap;
const vGap = maybeVGap ?? hGap ?? gap;

const style = { '--columns': columns };
---

<Element class:list={['dd-layout-grid', align, `h-gap-${hGap}`, `v-gap-${vGap}`]} style={style}>
    <slot />
</Element>

<style>
    .dd-layout-grid {
        display: grid;
        row-gap: var(--_layout-grid-h-gap);
        column-gap: var(--_layout-grid-v-gap);
        grid-template-columns: repeat(var(--columns), 1fr);
        list-style: none;
    }

    .dd-layout-grid > :global(*) {
        margin: 0 !important;
    }

    .center {
        align-items: center;
    }

    .column {
        flex-direction: column;
    }

    .h-gap-s {
        --_layout-grid-h-gap: var(--dd-gap-s);
    }

    .h-gap-m {
        --_layout-grid-h-gap: var(--dd-gap-m);
    }

    .h-gap-l {
        --_layout-grid-h-gap: var(--dd-gap-l);
    }

    .h-gap-s {
        --_layout-grid-v-gap: var(--dd-gap-s);
    }

    .h-gap-m {
        --_layout-grid-v-gap: var(--dd-gap-m);
    }

    .h-gap-l {
        --_layout-grid-v-gap: var(--dd-gap-l);
    }

    .wrap {
        flex-wrap: wrap;
    }
</style>
