---
export type LayoutGridProps = {
    flow?: 'tight';
    columns?: number | string;
    align?: 'start' | 'center';
    gap?: 'xs' | 's' | 'm' | 'l';
    rowGap?: 'xs' | 's' | 'm' | 'l';
    colGap?: 'xs' | 's' | 'm' | 'l';
    tag?: 'div' | 'ul' | 'li';
};

type Props = LayoutGridProps;

const {
    flow,
    align = 'start',
    columns = 2,
    gap: maybeGap,
    rowGap: mayberowGap,
    colGap: maybecolGap,
    tag: Element = 'div',
} = Astro.props;

const gap = maybeGap || 'm';
const rowGap = mayberowGap ?? gap;
const colGap = maybecolGap ?? rowGap;

const classList = [
    'dd-layout-grid',
    flow,
    align,
    `row-gap-${rowGap}`,
    `col-gap-${colGap}`,
    { template: typeof columns === 'string' },
];
const style = typeof columns === 'number' ? { '--columns': columns } : { '--template': columns };
---

<Element class:list={classList} style={style}>
    <slot />
</Element>

<style>
    .dd-layout-grid {
        display: grid;
        grid-template-columns: repeat(var(--columns), 1fr);
        align-items: start;
        row-gap: var(--__layout-grid-row-gap);
        column-gap: var(--__layout-grid-col-gap);
        list-style: none;
    }

    .template {
        grid-template-columns: var(--template);
    }

    .flow {
        margin-block: 1rem;
    }

    .wrap {
        flex-wrap: wrap;
    }

    .center {
        align-items: center;
    }

    .column {
        flex-direction: column;
    }

    .row-gap-xs {
        --__layout-grid-row-gap: var(--dd-gap-xs);
    }

    .row-gap-s {
        --__layout-grid-row-gap: var(--dd-gap-s);
    }

    .row-gap-m {
        --__layout-grid-row-gap: var(--dd-gap-m);
    }

    .row-gap-l {
        --__layout-grid-row-gap: var(--dd-gap-l);
    }

    .col-gap-xs {
        --__layout-grid-col-gap: var(--dd-gap-xs);
    }

    .col-gap-s {
        --__layout-grid-col-gap: var(--dd-gap-s);
    }

    .col-gap-m {
        --__layout-grid-col-gap: var(--dd-gap-m);
    }

    .col-gap-l {
        --__layout-grid-col-gap: var(--dd-gap-l);
    }
</style>
