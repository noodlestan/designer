---
import type { ShowDecisionProps, ShowValueProps, ShowVizProps } from '../../types';

import { ShowDecisionUnavailable } from '../unavailable';
import { LayoutDynamic } from '../../layouts';
import { getDecisionComponentMap } from '../../meta';
import { resolveLayout } from '../../helpers';

type Props = ShowDecisionProps & Omit<ShowValueProps, 'v'> & Omit<ShowVizProps, 'v'>;

const { store, d, layout, ...rest } = Astro.props;

const [, decision] = store.decision({ $name: d });

const componentMap = decision && getDecisionComponentMap(decision);
const { component: ValueComponent, props: valueFixedProps = {} } = componentMap?.value || {};
const { component: VizComponent, props: vizFixedProps = {} } = componentMap?.viz || {};

const value = decision && decision.produce();

const [itemLayout] = resolveLayout(layout, ['row']);
---

{
    decision && (ValueComponent || VizComponent) && (
        <LayoutDynamic layout={itemLayout}>
            {VizComponent && <VizComponent {...rest} {...vizFixedProps} v={value} />}
            {ValueComponent && <ValueComponent {...rest} {...valueFixedProps} v={value} />}
        </LayoutDynamic>
    )
}
{!decision && <ShowDecisionUnavailable d={d} />}
