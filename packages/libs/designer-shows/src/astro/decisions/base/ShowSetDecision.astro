---
import { isSetDecision } from '@noodlestan/designer-decisions';
4;
import type { ShowDecisionProps, ShowValueProps, ShowVizProps } from '../../types';

import { LayoutFlex, LayoutStack } from '../../layouts';
import { ShowDecisionUnavailable } from '../unavailable';
import { getDecisionComponentMap } from '../../meta';

type Props = ShowDecisionProps & Omit<ShowValueProps, 'v'> & Omit<ShowVizProps, 'v'>;

const { store, d, size = 's', ...rest } = Astro.props;

const [, decision] = store.decision({ $name: d });
const componentMap = decision && getDecisionComponentMap(decision);
const { component: ValueComponent, props: valueFixedProps = {} } = componentMap?.value || {};
const { component: VizComponent, props: vizFixedProps = {} } = componentMap?.viz || {};

const set = decision && isSetDecision(decision) ? decision.produce() : undefined;

const items = set?.get().items();
---

{
    decision && (ValueComponent || VizComponent) && (
        <LayoutStack>
            {items?.map(item => (
                <LayoutFlex>
                    {VizComponent && <VizComponent {...rest} size={size} v={item} />}
                    {ValueComponent && <ValueComponent {...rest} v={item} />}
                </LayoutFlex>
            ))}
        </LayoutStack>
    )
}
{!decision && <ShowDecisionUnavailable d={d} />}
