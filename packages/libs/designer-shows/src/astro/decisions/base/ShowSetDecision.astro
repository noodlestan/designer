---
import { isSetDecision } from '@noodlestan/designer-decisions';
4;
import type {
    ShowDecisionLayout,
    ShowDecisionProps,
    ShowValueProps,
    ShowVizProps,
} from '../../types';

import { LayoutDynamic } from '../../layouts';
import { ShowDecisionUnavailable } from '../unavailable';
import { getDecisionComponentMap } from '../../meta';
import { resolveLayout } from '../../helpers/resolveLayout';

type Props = ShowDecisionProps & Omit<ShowValueProps, 'v'> & Omit<ShowVizProps, 'v'>;

const {
    store,
    d,
    layout,
    value: showValue = true,
    viz: showViz = true,
    size = 'm',
    muteErrors,
    ...rest
} = Astro.props;

const [, decision] = store.decision({ $name: d });

const componentMap = decision && getDecisionComponentMap(decision);
const { component: ValueComponent, props: valueProps = {} } = componentMap?.value || {};
const { component: VizComponent, props: vizProps = {} } = componentMap?.viz || {};

const set = decision && isSetDecision(decision) ? decision.produce() : undefined;
const items = set?.get().items();

const isSet = decision && isSetDecision(decision);
const base = (Array.isArray(layout) ? layout[0] : layout) || 'row';
const flipped = base === 'column' ? 'row' : 'column';
const defaultLayout: ShowDecisionLayout = isSet ? [base, flipped] : [base];
const [setLayout, itemLayout] = resolveLayout(layout, defaultLayout);
const muteValueErrors = showViz !== false;
const muteVizErrors = false;
---

999999 {muteErrors} aa
{showViz !== false} bbb {muteVizErrors} fff

{
    decision && (ValueComponent || VizComponent) && (
        <LayoutDynamic layout={setLayout}>
            {items?.map(item => (
                <LayoutDynamic layout={itemLayout} gap="s">
                    {VizComponent && (
                        <>
                            <VizComponent />
                        </>
                    )}
                    {ValueComponent && (
                        <ValueComponent
                            {...rest}
                            {...valueProps}
                            v={item}
                            value={showValue}
                            muteErrors={muteValueErrors}
                        />
                    )}
                </LayoutDynamic>
            ))}
        </LayoutDynamic>
    )
}
{!decision && <ShowDecisionUnavailable d={d} />}
