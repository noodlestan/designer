---
import { type ShowDecisionProps } from '../types';
import { LayoutFlex, LayoutGrid } from '../layouts';

type Props = ShowDecisionProps;

const { store, d } = Astro.props;

const decision = store.decision({ $name: d });
const { isFor = [], notFor = [] } = decision?.inputs()[0].usage || {}; // WIP match context (and encapsulate)
---

<div class="dd-attr-usage">
    <LayoutGrid columns="min-content auto" rowGap='l' colGap='xs'>
    {
        isFor.length > 0 && (
            <h4 class="dd-group-header">For:</h4>
            <LayoutFlex tag="ul" gap="xs">
                {isFor.map(item => (
                    <li class="dd-item">{item}</li>
                ))}
            </LayoutFlex>
        )
    }
    {
        notFor.length > 0 && (
            <h4 class="dd-group-header">Not For:</h4>
            <LayoutFlex tag="ul" gap="xs">
                {notFor.map(item => (
                    <li class="dd-item">{item}</li>
                ))}
            </LayoutFlex>
        )
    }
    </LayoutGrid>
</div>

<style>
    .dd-attr-usage {
        display: flex;
        flex-direction: column;
        gap: var(--dd-space-gap);
    }

    .dd-attr-usage .dd-group-header {
        min-width: 4.5rem;
        font-size: 1rem;
        line-height: 1.5rem;
        font-weight: 600;
        color: var(--dd-color-text);
        white-space: nowrap;
    }

    .dd-attr-usage .dd-item {
        padding: 0;
        padding-inline-end: var(--dd-gap-xs);
        font-size: 1rem;
        line-height: 1.5rem;
        font-weight: 300;
        color: var(--dd-color-text);
    }
</style>
