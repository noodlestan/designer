---
import { isSetDecision } from '@noodlestan/designer-decisions';

import { type DecisionTypeComponentProps, type ShowDecisionLayout } from '../types';
import { ShowDecision } from '../decisions';
import { DecisionCardLayout, type LayoutDynamicProps } from '../layouts';
import {
    ShowDecisionContexts,
    ShowDecisionData,
    ShowDecisionDescription,
    ShowDecisionModel,
    ShowDecisionParams,
    ShowDecisionUsage,
} from '../attributes';
import { resolveLayout } from '../helpers';

type Props = DecisionTypeComponentProps & {
    name?: boolean;
    description?: boolean;
    usage?: boolean;
    model?: boolean;
    params?: boolean;
    contexts?: boolean;
    data?: boolean;
};

const {
    store,
    d,
    layout,
    value: showValue = true,
    viz: showViz = true,
    size = 'm',
    options: showOptions,
    name: showName = true,
    description: showDescription = true,
    usage: showUsage = true,
    model: showModel,
    params: showParams,
    contexts: showContexts,
    data: showData,
    ...rest
} = Astro.props;

function resolveCardLayout(
    layout: ShowDecisionLayout,
    isSet: boolean,
    setLayout: LayoutDynamicProps['layout'],
) {
    if (isSet) {
        if (layout) {
            return setLayout === 'column' ? 'row' : 'column';
        }
        return 'column';
    }
    return 'row';
}

const [, decision] = store.decision({ $name: d });

const isSet = Boolean(decision && isSetDecision(decision));
const defaultLayout: ShowDecisionLayout = isSet ? ['row', 'column'] : ['column'];
const [setLayout, itemLayout] = resolveLayout(layout, defaultLayout);
const cardLayout = resolveCardLayout(layout, isSet, setLayout);

const nameSlot = showName && 'header';

const showValueOrViz = showValue || showViz;
const vizSlot = showValueOrViz && 'viz';

const showDetails = showDescription || showUsage;
const detailsSlot = showDetails && 'details';

const showMeta = showModel || showParams || showContexts || showData;
const metaSlot = showMeta && 'meta';
---

<DecisionCardLayout layout={cardLayout}>
    {decision && showName && <Fragment slot={nameSlot}>{decision.name()}</Fragment>}
    {
        showValueOrViz && (
            <Fragment slot={vizSlot}>
                <ShowDecision
                    {...rest}
                    store={store}
                    d={d}
                    layout={[setLayout, itemLayout]}
                    value={showValue}
                    viz={showViz}
                    options={showOptions}
                    size={size}
                />
            </Fragment>
        )
    }
    {
        decision && showDetails && (
            <Fragment slot={detailsSlot}>
                {showDescription !== false && <ShowDecisionDescription store={store} d={d} />}
                {showUsage !== false && <ShowDecisionUsage store={store} d={d} />}
            </Fragment>
        )
    }
    {
        decision && showMeta && (
            <Fragment slot={metaSlot}>
                {showModel && <ShowDecisionModel store={store} d={d} />}
                {showParams && <ShowDecisionParams store={store} d={d} />}
                {showData && <ShowDecisionData store={store} d={d} />}
                {showContexts && <ShowDecisionContexts store={store} d={d} />}
            </Fragment>
        )
    }
</DecisionCardLayout>
