---
import { type ShowDecisionProps } from '../types';
import { resolveDecisionProp } from '../helpers';
import { ShowDecision } from '../decisions';
import { DecisionCardLayout } from '../layouts';
import {
    ShowDecisionContexts,
    ShowDecisionData,
    ShowDecisionDescription,
    ShowDecisionModel,
    ShowDecisionParams,
    ShowDecisionUsage,
} from '../attributes';

type Props = ShowDecisionProps & {
    name?: boolean;
    description?: boolean;
    usage?: boolean;
    model?: boolean;
    params?: boolean;
    contexts?: boolean;
    data?: boolean;
};

const {
    store,
    d,
    value: showValue = true,
    viz: showViz = true,
    options: showOptions,
    name: showName = true,
    description: showDescription = true,
    usage: showUsage = true,
    model: showModel,
    params: showParams,
    contexts: showContexts,
    data: showData,
} = Astro.props;

const decision = resolveDecisionProp(store, d);

const nameSlot = showName && 'header';

const showValueOrViz = showValue || showViz;
const vizSlot = showValueOrViz && 'viz';

const showDetails = showDescription || showUsage;
const detailsSlot = showDetails && 'details';

const showMeta = showModel || showParams || showContexts || showData;
const metaSlot = showMeta && 'meta';
---

<DecisionCardLayout>
    {decision && showName && <Fragment slot={nameSlot}>{decision.input().name}</Fragment>}
    {
        showValueOrViz && (
            <Fragment slot={vizSlot}>
                <ShowDecision
                    store={store}
                    d={decision || d}
                    value={showValue}
                    viz={showViz}
                    options={showOptions}
                    size="m"
                />
            </Fragment>
        )
    }
    {
        decision && showDetails && (
            <Fragment slot={detailsSlot}>
                {showDescription !== false && (
                    <ShowDecisionDescription store={store} d={decision} />
                )}
                {showUsage !== false && <ShowDecisionUsage store={store} d={decision} />}
            </Fragment>
        )
    }
    {
        decision && showMeta && (
            <Fragment slot={metaSlot}>
                {showModel && <ShowDecisionModel store={store} d={decision} />}
                {showParams && <ShowDecisionParams store={store} d={decision} />}
                {showData && <ShowDecisionData store={store} d={decision} />}
                {showContexts && <ShowDecisionContexts store={store} d={decision} />}
            </Fragment>
        )
    }
</DecisionCardLayout>
