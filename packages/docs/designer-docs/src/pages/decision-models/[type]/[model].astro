---
import { getCollection } from 'astro:content';
import StarlightPage from '@astrojs/starlight/components/StarlightPage.astro';
import { Badge, LinkCard } from '@astrojs/starlight/components';
import { type DecisionModelMeta } from '@noodlestan/designer-decisions';

import { sidebar } from '../../../navigation/sidebar';

export async function getStaticPaths() {
    const decisionTypes = await getCollection('decisionTypes');
    const decisionTypesById = decisionTypes.reduce(
        (acc, item) => {
            acc[item.id] = item;
            return acc;
        },
        {} as Record<string, (typeof decisionTypes)[0]>,
    );
    const models = await getCollection('models');
    console.log(models);
    return models.map(item => ({
        params: { type: item.data.type, model: item.data.model.split('/')[1] },
        props: { decisionType: decisionTypesById[item.data.type], model: item.data },
    }));
}

const { decisionType, model } = Astro.props;

const decisions = await getCollection('decisions');
const samples = decisions.filter(d => d.data.type === decisionType.id + '/' + model.model);

const frontmatter = {
    ...decisionType.data,
    title: decisionType.data.name + ' / ' + model.name,
};

const headings = [
    {
        depth: 2,
        slug: 'models',
        text: 'Decision models'
    }
]
if (samples.length) {
    headings.unshift({
        depth: 2,
        slug: 'samples',
        text: 'Samples'
    })
}
---

<StarlightPage frontmatter={frontmatter} sidebar={sidebar} headings={headings}>
    <p>
        <Badge variant="tip" text={decisionType.data.domain} />
        <Badge variant="note" text={decisionType.data.category} />
    </p>

    <p>model: <code>{model.type}</code></p>
    <blockquote>
        {model.description}
    </blockquote>
    <blockquote>
        <p>type: <a href={`/decision-models/${decisionType.id}`}>{decisionType.data.name}</a></p>
        {decisionType.data.description}
    </blockquote>

    {(samples.length) ?
        <>
            <h3 id="samples">Samples</h3>
            {
                samples.map(decision => (
                    <li>
                        {decision.data.type}
                        {decision.data.name}
                        {decision.data.params}
                        {decision.data.description}
                    </li>
                ))
            }
        </>
        : <></>
    }

    <h3 id="models">{decisionType.data.name} Models</h3>
    {
        decisionType.data.models.map((m: DecisionModelMeta) => (
            <li>
                {(m.model === model.model) ? <>ðŸ‘‰</> : ''}
                <a href={`/decision-models/${m.model}`}>{m.name}</a>
                {m.description}
            </li>
        ))
    }
    <LinkCard href="/decision-models" title="Other decision models" />
</StarlightPage>
